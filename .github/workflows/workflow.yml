name: PICTO-CI
on:
# 특정 경로 내 파일이 변동 되었을 경우 위크플로우 트리거
  push:
    paths:
      - "SessionScheduler/**"
      - "PhotoManager/**"
      - "UserManager/**"
  pull_request:
      paths:
      - "SessionScheduler/**"
      - "PhotoManager/**"
      - "UserManager/**"

# 환경 변수 설정

    
# {소유자명}/{저장소명}@{참조자} 를 통해 다른 사용자가 만든 명령어 파이프라인을 사용할 수 있다.
# ex) actions/checkout@v2는 실행 환경에서 현재 깃헙 레파지토리를 가지고 와서 main 브랜치로 checkout하는 동작을 수행

jobs:
  # 첫번째 JOB, filter : 특정 폴더에 변화가 있는지 확인하고 결과를 반환.
  filter:
  # 실행 환경
    runs-on: ubuntu-latest
    outputs:
    # key : value (출력값 : 입력값(filter의 결과값 리스트))
      photo-manager: ${{ steps.filter.outputs.photo }}
      user-manager: ${{ steps.filter.outputs.user }}
      session-handler: ${{ steps.filter.outputs.session }}
    steps:
      - uses: actions/checkout@v2
      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
        # key : value (value에 해당되는 파일들의 변화가 있으면 파일명이 아닌 true로 반환 아니면 false)
          filters: |
            photo: 'PhotoManager/**'
            user: 'UserManager/**'
            session: 'SessionScheduler/**'
            

  # 이후부터는 선택적으로 실행된다 -> 폴더 변화 유무에 따라 실행
  photo-manager:
    needs: filter
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: PhotoManager
    if: ${{ needs.filter.outputs.photo-manager == 'true'}} 
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          # cache: 'gradle'

      - name: Set github checkout
        uses: actions/checkout@v3

      - name: Set application.yml
        run: | 
          touch ./src/main/resources/application.yml
          sudo echo "${{ secrets.PHOTO_MANAGER_ACPPLICATION }}" > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Init gradle wrapper
        run: gradle wrapper

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Login Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Dcoker image
        run: docker build -f Dockerfile -t ak47001/picto:photo-manager .

      - name: Push image DcokerHub
        run: docker image push ak47001/picto:photo-manager


  user-manager:
    needs: filter
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: UserManager
    if: ${{ needs.filter.outputs.user-manager == 'true'}} 
    steps:
      - name : Test
        run: echo "UserManager true"

  session-scheduler:
    needs: filter
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: SessionScheduler
    if: ${{ needs.filter.outputs.session-handler == 'true'}} 
    steps:
      - name : Test
        run: echo "SessionHandler true"