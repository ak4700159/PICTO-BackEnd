name: PICTO-CI
on:
# 특정 경로 내 파일이 변동 되었을 경우 위크플로우 트리거
  push:
    paths:
      - "SessionScheduler/**"
      - "PhotoManager/**"
      - "UserManager/**"
  pull_request:
      paths:
      - "SessionScheduler/**"
      - "PhotoManager/**"
      - "UserManager/**"

# 환경 변수 설정

    
# {소유자명}/{저장소명}@{참조자} 를 통해 다른 사용자가 만든 명령어 파이프라인을 사용할 수 있다.
# ex) actions/checkout@v2는 실행 환경에서 현재 깃헙 레파지토리를 가지고 와서 main 브랜치로 checkout하는 동작을 수행

jobs:
  # 첫번째 JOB, filter : 특정 폴더에 변화가 있는지 확인하고 결과를 반환.
  filter:
  # 실행 환경
    runs-on: ubuntu-latest
    outputs:
    # key : value (출력값 : 입력값(filter의 결과값 리스트))
      photo-manager: ${{ steps.filter.outputs.photo }}
      user-manager: ${{ steps.filter.outputs.user }}
      session-handler: ${{ steps.filter.outputs.session }}
    steps:
      - uses: actions/checkout@v2
      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
        # key : value (value에 해당되는 파일들의 변화가 있으면 파일명이 아닌 true로 반환 아니면 false)
          filters: |
            photo: 'PhotoManager/**'
            user: 'UserManager/**'
            session: 'SessionScheduler/**'
            

  # 이후부터는 선택적으로 실행된다 -> 폴더 변화 유무에 따라 실행
  photo-manager:
    needs: filter
    runs-on: ubuntu-latest
    if: ${{ needs.filter.outputs.photo-manager == 'true' }}
    steps:
      - name: Build and Push PhotoManager
        uses: ./.github/actions/picto-build-push
        with:
          directory: "PhotoManager"
          docker-image: "ak47001/picto:photo-manager"
          application-yml: ${{ secrets.PHOTO_MANAGER_ACPPLICATION }}


  user-manager:
    needs: filter
    runs-on: ubuntu-latest
    if: ${{ needs.filter.outputs.user-manager == 'true' }}
    steps:
      - name: Build and Push UserManager
        uses: ./.github/actions/picto-build-push
        with:
          directory: "UserManager"
          docker-image: "ak47001/picto:user-manager"
          application-yml: ${{ secrets.USER_MANAGER_ACPPLICATION }}

  session-handler:
    needs: filter
    runs-on: ubuntu-latest
    if: ${{ needs.filter.outputs.session-handler == 'true'}} 
    steps:
      - name: Build and Push SessionScheduler
        uses: ./.github/actions/picto-build-push
        with:
          directory: "SessionScheduler"
          docker-image: "ak47001/picto:session-scheduler"
          application-yml: ${{ secrets.SESSION_HANDLER_ACPPLICATION }}